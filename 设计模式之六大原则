参考：https://www.cnblogs.com/dolphin0520/p/3919839.html
一.单一职责原则(Single Responsibility Principle, SRP):
一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。

二.开闭原则(Open-Closed Principle, OCP)：
一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。

模块应对扩展开放，而对修改关闭。模块应尽量在不修改原（是“原”，指原来的代码）代码的情况下进行扩展

三.里氏代换原则(Liskov Substitution Principle, LSP)：
所有引用基类（父类）的地方必须能透明地使用其子类的对象。
如果调用的是父类的话，那么换成子类也完全可以运行
里氏代换原则是继承复用的一个基础

四.依赖倒转原则(Dependency Inversion  Principle, DIP)：
抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。

指在软件里面，把父类都替换成它的子类，程序的行为没有变化。简单的说，子类型能够替换掉它们的父类型。
依赖性倒转其实可以说是面向对象设计的标志，用哪种语言编程并不是很重要。

五.接口隔离原则(Interface  Segregation Principle, ISP)：
使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。

定制服务的例子，每一个接口应该是一种角色，不多不少，不干不该干的事，该干的事都要干。

六.迪米特法则(Law of  Demeter, LoD)：-----最少知识原则
一个软件实体应当尽可能少地与其他实体发生相互作用。

不要和陌生人说话，即一个对象应对其他对象有尽可能少的了解。

七、合成/聚合复用
合成/聚合复用原则（Composite/Aggregate Reuse Principle，CARP）经常又叫做合成复用原则。合成/聚合复用原则就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分；新的对象通过向这些对象的委派达到复用已有功能的目的。它的设计原则是：要尽量使用合成/聚合，尽量不要使用继承。
就是说要少用继承，多用合成关系来实现。






